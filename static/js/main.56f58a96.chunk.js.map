{"version":3,"sources":["component/Card.js","component/CardList.js","component/robots.js","component/SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","className","src","id","alt","CardList","robots","map","user","i","key","username","SearchBox","searchChange","searchfiled","type","placeholder","onChange","App","onSearchChange","e","setState","searchfield","target","value","state","filteredRobots","this","filter","robot","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0NAgBeA,EAbF,SAACC,GAAW,IACdC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,MACf,OACE,yBAAKC,UAAU,oDACb,yBAAKC,IAAG,+BAA0BJ,EAAMK,GAAhC,YAA8CC,IAAI,UAC1D,6BACE,4BAAKL,GACL,+BAAKC,MCOEK,EAdE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEhB,OAAO,6BACHA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLN,GAAIG,EAAOG,GAAGN,GACdJ,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCZxBM,G,MAAS,CACpB,CACEH,GAAI,EACJJ,KAAM,gBACNY,SAAU,OACVX,MAAO,qBAET,CACEG,GAAI,EACJJ,KAAM,eACNY,SAAU,YACVX,MAAO,qBAET,CACEG,GAAI,EACJJ,KAAM,mBACNY,SAAU,WACVX,MAAO,sBAET,CACEG,GAAI,EACJJ,KAAM,mBACNY,SAAU,WACVX,MAAO,6BAET,CACEG,GAAI,EACJJ,KAAM,mBACNY,SAAU,SACVX,MAAO,4BAET,CACEG,GAAI,EACJJ,KAAM,uBACNY,SAAU,mBACVX,MAAO,2BAET,CACEG,GAAI,EACJJ,KAAM,kBACNY,SAAU,eACVX,MAAO,0BAET,CACEG,GAAI,EACJJ,KAAM,2BACNY,SAAU,gBACVX,MAAO,wBAET,CACEG,GAAI,EACJJ,KAAM,kBACNY,SAAU,WACVX,MAAO,2BAET,CACEG,GAAI,GACJJ,KAAM,qBACNY,SAAU,iBACVX,MAAO,4BC5CIY,EAbG,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,aAA8B,EAAjBC,YAC/B,OACE,yBAAKb,UAAU,OACb,2BACAc,KAAK,SACLC,YAAY,SACZf,UAAU,mCACVgB,SAAUJ,MC8BDK,G,wDA9Bb,aAAc,IAAD,8BACX,gBAOFC,eAAgB,SAACC,GACf,EAAKC,SAAS,CACZC,YAAaF,EAAEG,OAAOC,SARxB,EAAKC,MAAQ,CACXnB,OAASA,EACTgB,YAAY,IAJH,E,qDAaH,IAAD,OACDI,EAAiBC,KAAKF,MAAMnB,OAAOsB,QAAO,SAAAC,GAC9C,OAAOA,EAAM9B,KAAK+B,cAAcC,SAAS,EAAKN,MAAMH,YAAYQ,kBAGlE,OACE,yBAAK7B,UAAU,MACb,wBAAIA,UAAU,MAAd,cACA,kBAAC,EAAD,CACAY,aAAcc,KAAKR,iBAEnB,kBAAC,EAAD,CAAUb,OAAQoB,S,GAzBRM,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.56f58a96.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Card = (props) => {\r\n    const {name ,email} = props;\r\n  return (\r\n    <div className=\" tc bg-light-green dib pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${props.id}?200x200`} alt=\"robot\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p> {email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n    return <div>{\r\n        robots.map((user, i) => {\r\n            return (\r\n                <Card\r\n                    key={i}\r\n                    id={robots[i].id}\r\n                    name={robots[i].name}\r\n                    email={robots[i].email} />\r\n            );\r\n        })}</div>;\r\n};\r\n\r\nexport default CardList;\r\n","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from \"react\";\r\n\r\nconst SearchBox = ({searchChange,searchfiled}) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input \r\n      type=\"search\" \r\n      placeholder=\"search\"\r\n      className=\"pa3 ba b--grean bg-lightest-blue\"\r\n      onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from \"react\";\nimport CradList from \"./component/CardList\";\nimport \"tachyons\";\nimport { robots } from \"./component/robots\";\nimport SearchBox from \"./component/SearchBox\";\n//css\nimport \"./App.css\"\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      robots : robots,\n      searchfield:''\n    }\n  }\n\n  onSearchChange =(e) =>{\n    this.setState({\n      searchfield: e.target.value\n    })\n  }\n  render() {\n    const filteredRobots = this.state.robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n    })\n\n    return (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RoboFriend</h1>\n        <SearchBox\n        searchChange={this.onSearchChange}\n        />\n        <CradList robots={filteredRobots} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}